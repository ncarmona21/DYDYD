---
AWSTemplateFormatVersion: "2010-09-09"

Description: |
  Based on the RekognitionFaceDetection.yaml: v0.0.1 provided by Christian Petters https://aws.amazon.com/blogs/machine-learning/build-your-own-face-recognition-service-using-amazon-rekognition/
  This will deploy the grand majority of the stack to run DYDYD

Parameters:
  DYDYDArtifactBucketName:
    Type: String
    AllowedPattern: '[a-z\-]*[a-z0-9]*'
    Description: Name of Amazon S3 bucket containing DYDYD build artifacts
  FacialImageBucketName:
    Type: String
    AllowedPattern: '[a-z\-]*[a-z0-9]*'
    Description: Name of Amazon S3 bucket for image upload and processing of facial images
  DishImageBucketName:
    Type: String
    AllowedPattern: '[a-z\-]*[a-z0-9]*'
    Description: Name of Amazon S3 bucket for image upload and processing of dish images
  DynamoDBFaceMetaTableName:
    Type: String
    AllowedPattern: '[a-z][a-zA-Z0-9]*'
    Description: Name of Amazon DynamoDB table to hold face metadata
  DynamoDBPersonTableName:
    Type: String
    AllowedPattern: '[a-z][a-zA-Z0-9]*'
    Description: Name of Amazon DynamoDB table to hold person data
  DynamoDBSinkVisitsTableName:
    Type: String
    AllowedPattern: '[a-z][a-zA-Z0-9]*'
    Description: Name of Amazon DynamoDB table to information about a visit to the sink
  DynamoDBDishesTableName:
    Type: String
    AllowedPattern: '[a-z][a-zA-Z0-9]*'
    Description: Name of Amazon DynamoDB table to hold information about the current state of paticular dishes in the sink       
  CollectionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: Name of Amazon Rekognition collection name     

Resources:
  # IAM execution role for ImageRekognition Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","s3","", "", !Ref FacialImageBucketName]],  "/*"]]
          - Effect: Allow
            Action:
              - rekognition:IndexFaces
            Resource: "*"
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","dynamodb",!Ref "AWS::Region", !Ref "AWS::AccountId"]],  ":table/", !Ref DynamoDBFaceMetaTableName]]       

  BootstrapExecutionRole:
    # IAM execution role for Bootstrap Lambda function
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: AmazonRekognition
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - rekognition:CreateCollection
              - rekognition:DeleteCollection
              - rekognition:ListCollections
            Resource: "*"          
      - PolicyName: AWSLambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"                  

  DynamoDBFaceMetaTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "RekognitionId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "RekognitionId"
          KeyType: "HASH"         
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: 
        !Ref DynamoDBFaceMetaTableName

  DynamoDBSinkVisitsTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "VisitId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "VisitId"
          KeyType: "HASH"         
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: 
        !Ref DynamoDBSinkVisitsTableName

  DynamoDBPersonTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "PersonId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "PersonId"
          KeyType: "HASH"         
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: 
        !Ref DynamoDBPersonTableName

  DynamoDBDishesTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "DishId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "DishId"
          KeyType: "HASH"         
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: 
        !Ref DynamoDBDishesTableName

  ImageRekognition:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: !Join ["-", ["IndexFaces", !Ref "AWS::StackName"]]
      Code:
        ZipFile: !Sub |
          from __future__ import print_function

          import boto3
          from decimal import Decimal
          import json
          import urllib

          print('Loading function')

          dynamodb = boto3.client('dynamodb')
          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')


          # --------------- Helper Functions ------------------

          def index_faces(bucket, key):
              response = rekognition.index_faces(
                Image={"S3Object":
                  {"Bucket": bucket,
                  "Name": key}},
                  CollectionId="${CollectionName}")
              return response

          def update_index(tableName,faceId, fullName):
              response = dynamodb.put_item(
                TableName=tableName,
                Item={
                  'RekognitionId': {'S': faceId},
                  'FullName': {'S': fullName}
                  }
              )
        
          # --------------- Main handler ------------------

          def lambda_handler(event, context):

              # Get the object from the event
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.unquote_plus(
                event['Records'][0]['s3']['object']['key'].encode('utf8'))

              try:

                  # Calls Amazon Rekognition IndexFaces API to detect faces in S3 object
                  # to index faces into specified collection
        
                  response = index_faces(bucket, key)
        
                  # Commit faceId and full name object metadata to DynamoDB
        
                  if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                      faceId = response['FaceRecords'][0]['Face']['FaceId']

                      ret = s3.head_object(Bucket=bucket,Key=key)
                      personFullName = ret['Metadata']['fullname']

                      update_index('${DynamoDBFaceMetaTableName}',faceId,personFullName)

                  # Print response to console.
                  print(response)

                  return response
              except Exception as e:
                  print(e)
                  print("Error processing {} from bucket {}. ".format(key, bucket)) 
                  raise e
      
      Description: Triggered by S3, indexes faces against a collection in Amazon Rekognition
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 5
      
  FacesUploadBucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - RekognitionLambdaPermission
    Properties:
      BucketName: !Ref FacialImageBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ImageRekognition.Arn
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: index/
  DishesUploadBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref DishImageBucketName

  RekognitionLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      "Action": "lambda:invokeFunction"
      "FunctionName": !GetAtt ImageRekognition.Arn
      "Principal": "s3.amazonaws.com"
      "SourceArn": !Join [":", ["arn","aws","s3","", "", !Ref FacialImageBucketName]]  

  LambdaCreateCollection:
    Type: "AWS::Lambda::Function" 
    Properties:
      Description: Custom resource function to create Rekognition collection
      FunctionName:
          Fn::Join: ["-", [!Ref "AWS::StackName", "CreateCollection"]]
      Handler: index.lambda_handler
      Role: !GetAtt [ BootstrapExecutionRole, Arn ]
      Runtime: python2.7
      Timeout: 10
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import cfnresponse
          import logging
          import traceback

          def lambda_handler(event, context):
              
                print ('received event:' + json.dumps(event, indent=2))
                
                rekognition = boto3.client('rekognition')
                logger = logging.getLogger()

                if event['RequestType'] == 'Delete':
                    try:
                        ret = rekognition.delete_collection(CollectionId='${CollectionName}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            print ('Resource deleted')
                            cfnresponse.send(event, context, "SUCCESS", {})
                        return
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                else:
                    try:
                        ret = rekognition.create_collection(CollectionId='${CollectionName}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            print ('Resource created')
                            cfnresponse.send(event, context, "SUCCESS", {})
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
               
  PopulateCreateCollection: 
    Type: "Custom::CreateCollection"
    Version: "1.0"
    Properties: 
      ServiceToken: !GetAtt LambdaCreateCollection.Arn

  IdentifyLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri: !Join [["s3://", !Ref "DYDYDArtifactBucketName", identify.zip]]
      Description: Lambda handler for DYDYD API identify person endpoint
      MemorySize: 256
      Timeout: 60
      Events:
        AddPhotoApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /identifyperson
            Method: PUT

  IgnoreLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri: !Join [["s3://", !Ref "DYDYDArtifactBucketName", ignore.zip]]
      Description: Lambda handler for DYDYD API identify endpoint
      MemorySize: 256
      Timeout: 60
      Events:
        AddPhotoApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /ignoreperson
            Method: PUT

  UpdateLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri: !Join [["s3://", !Ref "DYDYDArtifactBucketName", update.zip]]
      Description: Lambda handler for DYDYD API update dish status endpoint
      MemorySize: 256
      Timeout: 60
      Events:
        AddPhotoApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /updatedishstatus
            Method: UPDATE

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: !Join [["s3://", !Ref "DYDYDArtifactBucketName", /swagger.yaml]]
      StageName: Prod
      Variables:
        IdentifyLambdaFunctionName: !Ref IdentifyLambdaFunction
        IgnoreLambdaFunctionName: !Ref IgnoreLambdaFunction
        UpdateLambdaFunctionName: !Ref UpdateLambdaFunction      


Outputs:
  DynamoDBFaceMetaTableName:
    Value: !Ref DynamoDBFaceMetaTableName
    Description: Name of the DynamoDB table
  DynamoDBPersonTableName:
    Value: !Ref DynamoDBPersonTableName
    Description: Name of the DynamoDB table
  DynamoDBSinkVisitsTableName:
    Value: !Ref DynamoDBSinkVisitsTableName
    Description: Name of the DynamoDB table
  DynamoDBDishesTableName:
    Value: !Ref DynamoDBDishesTableName
    Description: Name of the DynamoDB table
  CollectionName:
    Value: !Ref CollectionName
    Description: Name of the Rekognition collection
  FacialImageBucketName:
    Value: !Ref FacialImageBucketName    
    Description: Name of the S3 bucket
  DishImageBucketName:
    Value: !Ref DishImageBucketName    
    Description: Name of the S3 bucket
